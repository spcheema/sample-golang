name: Workflow with Checkout and Jobs

on: [push]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO_NAME: "spcheema/sample-golang"
  TAG: 0.0
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      my_output: ${{ steps.set-output.outputs.result }}
      image_name: ${{ steps.build-image.outputs.image_name }}
    steps:
      - name: Set TAG environment variable
        run: echo "TAG=$(date +'%H.%M')" >> $GITHUB_ENV

      - name: Checkout the DigitalOcean Sample Golang repository
        uses: actions/checkout@v4
        with:
          repository: ${{env.REPO_NAME}}
          token: ${{ env.GITHUB_TOKEN }}
      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_NAME="${{ env.REPO_NAME }}:${{ env.TAG }}"
          docker build -t $IMAGE_NAME .
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          docker save -o test-app.tar $IMAGE_NAME
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: test-app-image
          path: test-app.tar
      - name: Set output variable
        id: set-output
        run: echo "result=Hello from Job 1" >> $GITHUB_OUTPUT
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Use output from Job 1
        run: |
            echo "Build output: ${{ needs.build.outputs.my_output }}"
            echo "Build image_name: ${{ needs.build.outputs.image_name }}"
  services:
    runs-on: ubuntu-latest
    needs: build  
    services:
      my-service:
        image: ${{ needs.build.outputs.image_name }}
        ports:
          - 8080:8080
        env:
          PORT: 8080
          BUILD: ${{ needs.build.outputs.image_name }}
        
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: test-app-image

      - name: Load Docker image
        run: docker load -i test-app.tar

      - name: Verify the image exists
        run: docker images
      - name: Check service health
        run: |
          docker ps
          for i in {1..5}; do
           curl -i -s http://localhost:8080/healthcheck
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheck)

            if [ "$STATUS" -eq 200 ]; then
              echo "Health check passed!"
              exit 0
            fi

            echo "Attempt $i failed with status $STATUS. Retrying..."
            sleep 5
          done

          echo "Health check failed after 5 attempts."
          exit 1
      - name: App details
        run: |
          curl -i -s http://localhost:8080/env
